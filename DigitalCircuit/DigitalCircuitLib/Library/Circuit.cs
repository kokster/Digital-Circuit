//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Drawing;
using System.Windows.Forms;

namespace DigitalCircuit.Library
{
    /// <summary>
    /// Contains all the data about the current circuit.
    /// </summary>
    public class Circuit
    {
        /// <summary>
        /// The file path of the saved circuit. If it was not saved then it is NULL.
        /// </summary>
        public virtual string filepath
        {
            get;
            set;
        }

        /// <summary>
        /// The list of connections between components.
        /// </summary>
        private List<Connection> connections;

        /// <summary>
        /// The list of items.
        /// </summary>
        private List<Item> items;
        public List<Item> Items
        {
            get
            {
                return this.items;
            }
        }

        public Circuit()
        {
            items = new List<Item>();
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="port1"></param>
        /// <param name="port2"></param>
        /// <returns>True if successful, false if not.</returns>
        public virtual bool addConnection(Connection connection)
        {
            throw new System.NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="item"></param>
        /// <returns>True if successful, false if not.</returns>
        public virtual void deleteItem(Item item)
        {
            items.Remove(item);
        }

        public virtual bool toggleItem(IToggleable item)
        {
            throw new System.NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="item"></param>
        /// <returns>True if successful, false if not.</returns>
        public virtual bool addItem(Item item)
        {
            if (!checkCollision(item))
            {
                items.Add(item);
                return true;
            }
            else
            {
                return false;
            }
            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="connection"></param>
        /// <returns>True if successful, false if not.</returns>
        public virtual bool deleteConnection(Connection connection)
        {
            throw new System.NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="coordinates"></param>
        /// <returns>True if successful, false if not.</returns>
        public virtual bool checkCollision(Item item)
        {
            foreach (Item currentItem in items)
            {
                if (currentItem.BoundingBox.IntersectsWith(item.BoundingBox))
                {
                    return true;
                }
            }
            return false;
        }
    }
}