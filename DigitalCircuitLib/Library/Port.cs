//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Windows.Forms;

namespace DigitalCircuit.Library
{
    /// <summary>
    /// Is either an input or an output and is added to an item. 
    /// A port can be used by a connection and will be powered accordingly to this connection.
    /// </summary>
    /// 
    [Serializable]
    public class Port : ISerializable
    {
        /// <summary>
        /// The item that the port is assigned to
        /// </summary>
        public Item item { get; private set; }

        /// <summary>
        /// Event handler that will be fired when the power of the port has been changed
        /// </summary>
        /// <param name="sender"></param>
        public delegate void PoweredChangedHandler(object sender);
        public event PoweredChangedHandler PoweredChanged;

        /// <summary>
        /// True if port is powered, false if not.
        /// </summary>
        private bool? powered;
        public bool? Powered
        {
            get
            {
                return powered;
            }

            set
            {
                if (value != powered)
                {
                    powered = value;
                    PoweredChanged(this);
                }
            }
        }

        /// <summary>
        /// True if port is used, false if not.
        /// </summary>
        public bool isUsed
        {
            get;
            set;
        }

        /// <summary>
        /// True if the port is an output, false if the port is an output
        /// </summary>
        public bool isInput;

        public Port(Item item, bool isInput)
        {
            this.item = item;
            this.isInput = isInput;
            if (!this.isInput)
            {
                item.OutputChanged += item_OutputChanged;
                this.powered = item.getOutput();
            }
            this.isUsed = false;
        }

        public Port(SerializationInfo info, StreamingContext context)
        {
            this.powered = (bool?)info.GetValue("Powered", typeof(bool?));
            this.isInput = (bool)info.GetValue("isInput", typeof(bool));
            this.isUsed = (bool)info.GetValue("isUsed", typeof(bool));
        }

        /// <summary>
        /// Initializes a port after deserialization
        /// </summary>
        /// <param name="item"></param>
        public void Initialize(Item item)
        {
            this.item = item;

            if (!this.isInput)
            {
                item.OutputChanged += item_OutputChanged;
                this.powered = item.getOutput();
            }
        }

        /// <summary>
        /// Event handler that will be triggered when the output of the item has been changed.
        /// This only applies to output ports.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="newValue"></param>
        void item_OutputChanged(object sender, bool? newValue)
        {
            this.Powered = newValue;
        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("Powered", this.powered);
            info.AddValue("isInput", this.isInput);
            info.AddValue("isUsed", this.isUsed);
        }
    }
}