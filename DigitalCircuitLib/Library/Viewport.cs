//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
using System.Windows.Forms;
using System.Runtime.Serialization;

namespace DigitalCircuit.Library
{
    /// <summary>
    /// Displays (a part of) the circuit and is responsible for actions such as panning and zooming.
    /// </summary>
    /// 
[Serializable()]
    public class Viewport : ISerializable
    {
        /// <summary>
        /// The level of zooming.
        /// </summary>
        public decimal zoomingLevel
        {
            get;
            set;
        }
        /// <summary>
        /// The exact coordinates of the viewport.
        /// </summary>
        private Point location
        {
            get;
            set;
        }
        /// <summary>
        /// Width of the viewport.
        /// </summary>
        private int pixelWidth
        {
            get;
            set;
        }

        /// <summary>
        /// The circuit that the viewport has been assigned to
        /// </summary>
        private Circuit circuit;
        
        /// <summary>
        /// The absolute width of the viewport, this will change when the user zooms in or out
        /// or resizes the client size.
        /// </summary>
        private int absoluteWidth
        {
            get
            {
                return getAbsoluteLength(pixelWidth);
            }
        }

        /// <summary>
        /// The absolute height of the viewport, this will change when the user zooms in or out
        /// or resizes the client size.
        /// </summary>
        private int absoluteHeight
        {
            get
            {
                return getAbsoluteLength(pixelHeight);
            }
        }

        /// <summary>
        /// Height of the viewport expressed in pixels.
        /// </summary>
        private int pixelHeight
        {
            get;
            set;
        }

        /// <summary>
        /// A rectangle that represents the size and the location of the viewport
        /// </summary>
        private Rectangle ViewportRectangle
        {
            get
            {
                return new Rectangle(location.X, location.Y, absoluteWidth, absoluteHeight);
            }
        }

        public Viewport(Circuit circuit)
        {
            this.circuit = circuit;
            this.location = new Point(0, 0);
            this.zoomingLevel = 1;
        }

        public Viewport(SerializationInfo info, StreamingContext context)
        {
            this.location = (Point)info.GetValue("Location", typeof(Point));
            this.pixelWidth = (int)info.GetValue("pixelWidth", typeof(int));
            this.pixelHeight = (int)info.GetValue("pixelHeight", typeof(int));
            this.zoomingLevel = (decimal)info.GetValue("zoomingLevel", typeof(decimal));
        }
        
        /// <summary>
        /// Returns a list the items that are visible on the viewport
        /// </summary>
        /// <returns></returns>
        public List<Item> getVisibleItems()
        {
            List<Item> visibleItems = new List<Item>();
            foreach (Item item in circuit.Items)
            {
                if (item.BoundingBox.IntersectsWith(this.ViewportRectangle))
                {
                    visibleItems.Add(item);
                }
            }
            return visibleItems;
        }
        
        /// <summary>
        /// Returns a list of the connections that are visible
        /// ! Has not been implemented optimally for this version
        /// </summary>
        /// <returns></returns>
        public List<Connection> getVisibleConnections()
        {
            return circuit.Connections;
        }

        /// <summary>
        /// Set the circuit that the viewport is assigned to
        /// </summary>
        /// <param name="circuit"></param>
        public void SetCircuit(Circuit circuit)
        {
            this.circuit = circuit;
        }

        /// <summary>
        /// Change the size of the viewport, expressed in pixels
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        public void changeSize(int width, int height)
        {
            this.pixelWidth = width;
            this.pixelHeight = height;
        }

        /// <summary>
        /// Zooms out the viewport.
        /// </summary>
        public void zoomOut()
        {
            this.zoomingLevel = zoomingLevel / (decimal)2;
        }

        /// <summary>
        /// Zooms in  the viewport.
        /// </summary>
        public void zoomIn()
        {
            this.zoomingLevel = zoomingLevel * (decimal)2;
        }

        /// <summary>
        /// Calculates the absolute coordinates.
        /// </summary>
        /// <param name="coordinates"></param>
        /// <returns></returns>
        public Point getAbsoluteCoordinates(Point relativeCoordinates)
        {
            Point absoluteCoordinates = new Point(Convert.ToInt32((location.X + relativeCoordinates.X / zoomingLevel)),
                                                  Convert.ToInt32(location.Y + relativeCoordinates.Y / zoomingLevel));

            return absoluteCoordinates;
        }

        /// <summary>
        /// Change to location of the viewport relatively using a vector
        /// </summary>
        /// <param name="vector"></param>
        public void changeLocationRelatively(Point vector)
        {
            this.location = new Point(location.X + vector.X, location.Y + vector.Y);
        }
        
        /// <summary>
        /// Converts an absolute length to the length expressed in pixels
        /// </summary>
        /// <param name="length"></param>
        /// <returns></returns>
        public int getPixelLength(int length)
        {
            return Convert.ToInt32(Math.Round(length * zoomingLevel));
        }

        /// <summary>
        /// Converts an length expressed in pixels to the absolute length
        /// </summary>
        /// <param name="length"></param>
        /// <returns></returns>
        public int getAbsoluteLength(int length)
        {
            return Convert.ToInt32(Math.Round(length / zoomingLevel));
        }

        /// <summary>
        /// Converts a point expressed in pixels to the the absolute point
        /// </summary>
        /// <param name="absoluteLocation"></param>
        /// <returns></returns>
        public Point getPixelLocation(Point absoluteLocation)
        {
            return new Point(getPixelLength(absoluteLocation.X - this.location.X), getPixelLength(absoluteLocation.Y - this.location.Y));
        }

        /// <summary>
        /// Checks if there is a collision with a rectangle and the items on the circuit
        /// </summary>
        /// <param name="rectangle"></param>
        /// <returns></returns>
        public bool checkCollision(Rectangle rectangle)
        {
            return circuit.checkCollision(rectangle);
        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("Location", this.location);
            info.AddValue("pixelWidth", this.pixelWidth);
            info.AddValue("pixelHeight", this.pixelHeight);
            info.AddValue("zoomingLevel", this.zoomingLevel);
        }
    }
}