//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Windows.Forms;

namespace DigitalCircuit.Library
{
    /// <summary>
    /// A connection between an output port and an input port. 
    /// If the output port is powered the connection will pass the signal to the input port.
    /// </summary>
    /// 
    [Serializable()]
    public class Connection : ISerializable 
    {
        /// <summary>
        /// Whether the connection is connected to an input and an output
        /// </summary>
        public bool connected { get; private set; }

        public Connection(Port port1, Port port2)
        {
            if (port1.isInput == port2.isInput)
            {
                throw new Exception();
            }

            if (port1.isInput)
            {
                inputPort = port1;
                outputPort = port2;
            }
            else
            {
                inputPort = port2;
                outputPort = port1;
            }

            Connect();
        }

        /// <summary>
        /// Restablish a connection
        /// </summary>
        public void Connect()
        {
            connected = true;

            outputPort.PoweredChanged += outputPort_PoweredChanged;
            inputPort.Powered = outputPort.Powered;

            this.inputPort.isUsed = true;
            this.outputPort.isUsed = true;
        }

        void outputPort_PoweredChanged(object sender)
        {
            inputPort.Powered = ((Port)sender).Powered;
        }

        /// <summary>
        /// Checks if the connection is powered.
        /// </summary>
        /// <return>True if powered, false if not. </return>
        public virtual bool? isPowered
        {
            get
            {
                if (outputPort != null)
                {
                    return outputPort.Powered;
                }

                return null;
            }
        }

        /// <summary>
        /// Input port of the connecton.
        /// </summary>
        public Port inputPort
        {
            get;
            private set;
        }
        /// <summary>
        /// Output port of the connection.
        /// </summary>
        public Port outputPort
        {
            get;
            private set;
        }

        public Connection(SerializationInfo info, StreamingContext context)
        {
            this.inputPort = (Port)info.GetValue("inputPort", typeof(Port));
            this.outputPort = (Port)info.GetValue("outputPort", typeof(Port));
            this.connected = (bool)info.GetValue("connected", typeof(bool));
        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("inputPort", this.inputPort);
            info.AddValue("outputPort", this.outputPort);
            info.AddValue("connected", this.connected);
        }

        public void Disconnect()
        {
            connected = false;

            outputPort.PoweredChanged -= outputPort_PoweredChanged;
            inputPort.Powered = null;
            inputPort.isUsed = false;
            outputPort.isUsed = false;
        }
    }
}